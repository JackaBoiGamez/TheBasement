{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TheBasement Documentation","text":"<p>This is documentation for the scripts and entities behind \"TheBasement\" Roblox game.</p> <p>Here we document all of our Libraries, APIs, and Entities in order to better organize our game.</p> <p>Info</p> <p>This does not include the actual source scripts, but rather just examples of how to use them.</p> <p>You can however use any of the example scripts freely.</p> <p>The source code of the website is also free to use and is on GitHub \ud83d\ude0b</p>"},{"location":"#libraries","title":"Libraries","text":"<p>This contains all classes that are to be reused.</p>"},{"location":"#apis","title":"APIs","text":"<p>This contains all API headers that are meant to be accesss points.</p> <p>These access points are for different systems and data.</p>"},{"location":"#entities","title":"Entities","text":"<p>This contains all information related to entities.</p>"},{"location":"entities/","title":"Entities","text":""},{"location":"entities/#cat","title":"Cat","text":"<ul> <li>Hostility: Very</li> <li>States: Idle, Wander, Chase, Consume, Dead</li> <li>Description: Creature of darkness that moves through unlit areas.</li> </ul>"},{"location":"entities/#mimic","title":"Mimic","text":"<ul> <li>Hostility: Very</li> <li>States: Wander, Lure, Chase, Attack, Dead</li> <li>Description: Creature that can disguise itself as other players in the game or as someone on your friend's list.</li> </ul>"},{"location":"entities/#boulder","title":"Boulder","text":"<ul> <li>Hostility: Very</li> <li>States: Wander, Chase, Dead</li> <li>Description: A boulder that someone moves... unknown how. Will squash.</li> </ul>"},{"location":"entities/#banshee","title":"Banshee","text":"<ul> <li>Hostility: Very</li> <li>States: Wander, Stalk, Kidnap, Lure, Dead</li> <li>Description: A creature that lurks around the players and will attack from behind if a player is alone.</li> </ul>"},{"location":"entities/#worker","title":"Worker","text":"<ul> <li>Hostility: Unknown... Maybe Neutral</li> <li>States: Wander, Work, Dead</li> <li>Description: These creatures are comprised of people from your friends list and will work on areas around the map.</li> </ul>"},{"location":"entities/#subway-train","title":"Subway Train","text":"<ul> <li>Hostility: Unknown</li> <li>States: Moving, Stationed, Consuming</li> <li>Description: Very effective way of traversing the map.</li> </ul>"},{"location":"entities/#trickster","title":"Trickster","text":"<ul> <li>Hostility: Very</li> <li>States: Disguised, Attack, Dead</li> <li>Description: Disguises as lootable containers and attack when attempt to open.</li> </ul>"},{"location":"entities/#golf-cart","title":"Golf Cart","text":"<ul> <li>Hostility: Not Hostile</li> <li>States: Idle, Broken, Dead</li> <li>Description: A driveable golf cart that appears randomly.</li> </ul>"},{"location":"entities/#merchant","title":"Merchant","text":"<ul> <li>Hostility: RUN Friendly</li> <li>States: Unknown</li> <li>Description: Unknown origin or affiliation. Thought to be multi dimensional and freely moves throughout space. Don't Interact With Buy plenty of items from. \ud83d\ude0a</li> </ul>"},{"location":"libraries/","title":"Libraries","text":""},{"location":"libraries/#statemachine","title":"StateMachine","text":"<p>Contains and manages states</p>"},{"location":"libraries/#state","title":"State","text":"<p>Inheritable class with overridable functions</p>"},{"location":"libraries/State/","title":"State","text":"<p>Inheritable class with a <code>Enter</code> and <code>Exit</code> method:</p> <p>Inherited</p> <p>State is a class that must be inherited by another class to be used!</p>"},{"location":"libraries/State/#example-class","title":"Example Class","text":"WalkingState Class<pre><code>local WalkingState = {}\nWalkingState.__index = WalkingState\n\nfunction WalkingState.new(): typeof(WalkingState)\n    return setmetatable(State.new(\"Walking\"),WalkingState)\nend\n\n-- Only using player as an example you can pass in other arguments\nfunction WalkingState:Enter(player: Player)\n    print(`{player.Name} Walking`)\nend\n\nfunction WalkingState:Exit(player: Player)\n    print(`{player.Name} No Longer Walking`)\nend\n\nreturn WalkingState\n</code></pre>"},{"location":"libraries/State/#methods","title":"Methods","text":"<p>You can pass in any arguments into these methods</p> <p><code>State:Enter(...)</code></p> <p><code>State:Exit(...)</code></p>"},{"location":"libraries/StateMachine/","title":"StateMachine","text":"<p>Class made to contain and switch between States:</p>"},{"location":"libraries/StateMachine/#constructor","title":"Constructor","text":"<p>Requires Name of Inital State and a Table of States</p> States Table<pre><code>-- States Table Example\nlocal States: {[string]: typeof(State)} = {\n    [\"Walking\"] = LoadingState.new(),\n    [\"Running\"] = RunningState.new()\n}\n\n-- Example Object Creation\nlocal stateMachine = StateMachine.new(\"Walking\", States, ...)\n</code></pre>"},{"location":"libraries/StateMachine/#methods","title":"Methods","text":"<p>You can switch states by simply calling <code>:ChangeState(\"StateName\", ...)</code></p> Switch State Example<pre><code>stateMachine:ChangeState(\"Running\", player)\n</code></pre>"},{"location":"libraries/StateMachine/#signals","title":"Signals","text":"<p>You can connect to the <code>OnStateChange</code> signal for event based scripts.</p> OnStateChange Example<pre><code>stateMachine.OnStateChange:Connect(function(newState, currentState)\n    if currentState.name ~= \"Running\" or newState.name ~= \"Walking\" return end\n    print(\"Player Slowed Down :(\")\nend)\n</code></pre>"}]}